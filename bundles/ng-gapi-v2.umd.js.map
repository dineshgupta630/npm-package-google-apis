{"version":3,"file":"ng-gapi-v2.umd.js.map","sources":["ng://ng-gapi-v2/config/GoogleApiConfig.ts","ng://ng-gapi-v2/GoogleApiService.ts","ng://ng-gapi-v2/GoogleAuthService.ts","ng://ng-gapi-v2/GoogleApiModule.ts"],"sourcesContent":["import ClientConfig = gapi.auth2.ClientConfig;\n\nexport interface NgGapiClientConfig extends ClientConfig {\n    discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n    protected clientConfig: NgGapiClientConfig;\n\n    constructor(clientConfig: NgGapiClientConfig) {\n        this.clientConfig = clientConfig\n    }\n\n    public getClientConfig(): NgGapiClientConfig {\n        return this.clientConfig;\n    }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {GoogleApiConfig, NgGapiClientConfig} from \"./config/GoogleApiConfig\";\nimport {Observer} from \"rxjs/Observer\";\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n    new InjectionToken<NgGapiClientConfig>(\"ng-gapi.config\");\n\n@Injectable()\nexport class GoogleApiService {\n    private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n    private config: GoogleApiConfig;\n\n    constructor() {\n    }\n\n    public onInitialise(config: NgGapiClientConfig){\n        this.config = new GoogleApiConfig(config);\n        this.loadGapi().subscribe();\n    }\n\n    public onLoad(): Observable<void> {\n        return this.loadGapi();\n    }\n\n    public getConfig(): GoogleApiConfig {\n        return this.config;\n    }\n\n    private loadGapi(): Observable<void> {\n        return Observable.create((observer: Observer<boolean>) => {\n            let node = document.createElement('script');\n            node.src = this.gapiUrl;\n            node.type = 'text/javascript';\n            node.charset = 'utf-8';\n            document.getElementsByTagName('head')[0].appendChild(node);\n            node.onload = () => {\n                observer.next(true);\n                observer.complete();\n            };\n        });\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/mergeMap';\nimport {GoogleApiService} from \"./GoogleApiService\";\nimport GoogleAuth = gapi.auth2.GoogleAuth;\n\n@Injectable()\nexport class GoogleAuthService {\n    private GoogleAuth: GoogleAuth = undefined;\n\n    constructor(private googleApi: GoogleApiService) {\n        this.googleApi.onLoad().subscribe(() => {\n            this.loadGapiAuth();\n        });\n    }\n\n    public getAuth(): Observable<GoogleAuth> {\n        if (!this.GoogleAuth) {\n            return this.googleApi.onLoad().mergeMap(() => this.loadGapiAuth());\n        }\n        return Observable.of(this.GoogleAuth);\n    }\n\n    private loadGapiAuth(): Observable<GoogleAuth> {\n        return Observable.create((observer: Observer<GoogleAuth>) => {\n            gapi.load('auth2', () => {\n                gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n                  this.GoogleAuth = auth;\n                  observer.next(auth);\n                  observer.complete();\n                });\n            });\n        });\n    }\n}\n","import {ModuleWithProviders, NgModule, Provider} from \"@angular/core\";\nimport {GoogleAuthService} from \"./GoogleAuthService\";\nimport {GoogleApiService} from \"./GoogleApiService\";\n\n@NgModule()\nexport class GoogleApiModule {\n    static forRoot(gapiConfigProvider: Provider): ModuleWithProviders {\n        return {\n            ngModule: GoogleApiModule,\n            providers: [\n                gapiConfigProvider,\n                GoogleAuthService,\n                GoogleApiService\n            ]\n        }\n    }\n}\n"],"names":["InjectionToken","Observable","Injectable","NgModule"],"mappings":";;;;;;;;;;QAMA;QAGI,yBAAY,YAAgC;YACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;SACnC;;;;QAEM,yCAAe;;;;gBAClB,OAAO,IAAI,CAAC,YAAY,CAAC;;8BAdjC;QAgBC;;;;;;AChBD,yBAKW,cAAc,GACrB,IAAIA,mBAAc,CAAqB,gBAAgB,CAAC,CAAC;;QAOzD;2BAHmC,mCAAmC;SAIrE;;;;;QAEM,uCAAY;;;;sBAAC,MAA0B;gBAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;;;;;QAGzB,iCAAM;;;;gBACT,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;;;;;QAGpB,oCAAS;;;;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;QAGf,mCAAQ;;;;;gBACZ,OAAOC,qBAAU,CAAC,MAAM,CAAC,UAAC,QAA2B;oBACjD,qBAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;oBAC5C,IAAI,CAAC,GAAG,GAAG,KAAI,CAAC,OAAO,CAAC;oBACxB,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;oBAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,GAAG;wBACV,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACvB,CAAC;iBACL,CAAC,CAAC;;;oBAhCVC,eAAU;;;;+BARX;;;;;;;ACAA;QAYI,2BAAoB,SAA2B;YAA/C,iBAIC;YAJmB,cAAS,GAAT,SAAS,CAAkB;8BAFd,SAAS;YAGtC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC;gBAC9B,KAAI,CAAC,YAAY,EAAE,CAAC;aACvB,CAAC,CAAC;SACN;;;;QAEM,mCAAO;;;;;gBACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;oBAClB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,GAAA,CAAC,CAAC;iBACtE;gBACD,OAAOD,qBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;;;QAGlC,wCAAY;;;;;gBAChB,OAAOA,qBAAU,CAAC,MAAM,CAAC,UAAC,QAA8B;oBACpD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;wBACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,IAAgB;4BAClF,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;4BACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;yBACrB,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN,CAAC,CAAC;;;oBA1BVC,eAAU;;;;;wBAHH,gBAAgB;;;gCALxB;;;;;;;ACAA;;;;;;;QAMW,uBAAO;;;;YAAd,UAAe,kBAA4B;gBACvC,OAAO;oBACH,QAAQ,EAAE,eAAe;oBACzB,SAAS,EAAE;wBACP,kBAAkB;wBAClB,iBAAiB;wBACjB,gBAAgB;qBACnB;iBACJ,CAAA;aACJ;;oBAXJC,aAAQ;;8BAJT;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
