{"version":3,"sources":["ng://ng-gapi-v2/config/GoogleApiConfig.ts","ng://ng-gapi-v2/GoogleApiService.ts","ng://ng-gapi-v2/GoogleAuthService.ts","ng://ng-gapi-v2/GoogleApiModule.ts"],"names":["GoogleApiConfig","clientConfig","this","prototype","getClientConfig","NG_GAPI_CONFIG","InjectionToken","GoogleApiService","onInitialise","config","loadGapi","subscribe","onLoad","getConfig","Observable","create","observer","node","document","createElement","src","_this","gapiUrl","type","charset","getElementsByTagName","appendChild","onload","next","complete","Injectable","GoogleAuthService","googleApi","undefined","loadGapiAuth","getAuth","GoogleAuth","of","mergeMap","gapi","load","auth2","init","then","auth","GoogleApiModule","forRoot","ngModule","providers","NgModule"],"mappings":"qcAMAA,EAAA,WAGI,SAAAA,EAAYC,GACRC,KAAKD,aAAeA,SAGjBD,EAAAG,UAAAC,2BACH,OAAOF,KAAKD,gBARpB,GCDWI,EACP,IAAIC,EAAAA,eAAmC,+BAOvC,SAAAC,iBAHmC,2CAM5BA,EAAAJ,UAAAK,sBAAaC,GAChBP,KAAKO,OAAS,IAAIT,EAAgBS,GAClCP,KAAKQ,WAAWC,aAGbJ,EAAAJ,UAAAS,kBACH,OAAOV,KAAKQ,YAGTH,EAAAJ,UAAAU,qBACH,OAAOX,KAAKO,QAGRF,EAAAJ,UAAAO,+BACJ,OAAOI,EAAAA,WAAWC,OAAO,SAACC,GACtB,IAAIC,EAAOC,SAASC,cAAc,UAClCF,EAAKG,IAAMC,EAAKC,QAChBL,EAAKM,KAAO,kBACZN,EAAKO,QAAU,QACfN,SAASO,qBAAqB,QAAQ,GAAGC,YAAYT,GACrDA,EAAKU,OAAS,WACVX,EAASY,MAAK,GACdZ,EAASa,mCA9BxBC,EAAAA,wDCRDC,EAAA,WAYI,SAAAA,EAAoBC,GAApB,IAAAX,EAAAnB,KAAoBA,KAAA8B,UAAAA,kBAFaC,UAG7B/B,KAAK8B,UAAUpB,SAASD,UAAU,WAC9BU,EAAKa,wBAINH,EAAA5B,UAAAgC,8BACH,OAAKjC,KAAKkC,WAGHtB,EAAAA,WAAWuB,GAAGnC,KAAKkC,YAFflC,KAAK8B,UAAUpB,SAAS0B,SAAS,WAAM,OAAAjB,EAAKa,kBAKnDH,EAAA5B,UAAA+B,mCACJ,OAAOpB,EAAAA,WAAWC,OAAO,SAACC,GACtBuB,KAAKC,KAAK,QAAS,WACfD,KAAKE,MAAMC,KAAKrB,EAAKW,UAAUnB,YAAYT,mBAAmBuC,KAAK,SAACC,GAClEvB,EAAKe,WAAaQ,EAClB5B,EAASY,KAAKgB,GACd5B,EAASa,sCAvB1BC,EAAAA,sDAHOvB,OALR,GCAAsC,EAAA,gCAMWA,EAAAC,QAAP,WACI,MAAO,CACHC,SAAUF,EACVG,UAAW,CACPjB,EACAxB,yBAPf0C,EAAAA,aAJD","sourcesContent":["import ClientConfig = gapi.auth2.ClientConfig;\n\nexport interface NgGapiClientConfig extends ClientConfig {\n    discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n    protected clientConfig: NgGapiClientConfig;\n\n    constructor(clientConfig: NgGapiClientConfig) {\n        this.clientConfig = clientConfig\n    }\n\n    public getClientConfig(): NgGapiClientConfig {\n        return this.clientConfig;\n    }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {GoogleApiConfig, NgGapiClientConfig} from \"./config/GoogleApiConfig\";\nimport {Observer} from \"rxjs/Observer\";\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n    new InjectionToken<NgGapiClientConfig>(\"ng-gapi.config\");\n\n@Injectable()\nexport class GoogleApiService {\n    private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n    private config: GoogleApiConfig;\n\n    constructor() {\n    }\n\n    public onInitialise(config: NgGapiClientConfig){\n        this.config = new GoogleApiConfig(config);\n        this.loadGapi().subscribe();\n    }\n\n    public onLoad(): Observable<void> {\n        return this.loadGapi();\n    }\n\n    public getConfig(): GoogleApiConfig {\n        return this.config;\n    }\n\n    private loadGapi(): Observable<void> {\n        return Observable.create((observer: Observer<boolean>) => {\n            let node = document.createElement('script');\n            node.src = this.gapiUrl;\n            node.type = 'text/javascript';\n            node.charset = 'utf-8';\n            document.getElementsByTagName('head')[0].appendChild(node);\n            node.onload = () => {\n                observer.next(true);\n                observer.complete();\n            };\n        });\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/mergeMap';\nimport {GoogleApiService} from \"./GoogleApiService\";\nimport GoogleAuth = gapi.auth2.GoogleAuth;\n\n@Injectable()\nexport class GoogleAuthService {\n    private GoogleAuth: GoogleAuth = undefined;\n\n    constructor(private googleApi: GoogleApiService) {\n        this.googleApi.onLoad().subscribe(() => {\n            this.loadGapiAuth();\n        });\n    }\n\n    public getAuth(): Observable<GoogleAuth> {\n        if (!this.GoogleAuth) {\n            return this.googleApi.onLoad().mergeMap(() => this.loadGapiAuth());\n        }\n        return Observable.of(this.GoogleAuth);\n    }\n\n    private loadGapiAuth(): Observable<GoogleAuth> {\n        return Observable.create((observer: Observer<GoogleAuth>) => {\n            gapi.load('auth2', () => {\n                gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n                  this.GoogleAuth = auth;\n                  observer.next(auth);\n                  observer.complete();\n                });\n            });\n        });\n    }\n}\n","import {ModuleWithProviders, NgModule, Provider} from \"@angular/core\";\nimport {GoogleAuthService} from \"./GoogleAuthService\";\nimport {GoogleApiService} from \"./GoogleApiService\";\n\n@NgModule()\nexport class GoogleApiModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: GoogleApiModule,\n            providers: [\n                GoogleAuthService,\n                GoogleApiService\n            ]\n        }\n    }\n}\n"]}