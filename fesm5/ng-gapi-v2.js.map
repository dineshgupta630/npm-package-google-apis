{"version":3,"file":"ng-gapi-v2.js.map","sources":["ng://ng-gapi-v2/config/GoogleApiConfig.ts","ng://ng-gapi-v2/GoogleApiService.ts","ng://ng-gapi-v2/GoogleAuthService.ts","ng://ng-gapi-v2/GoogleApiModule.ts"],"sourcesContent":["import ClientConfig = gapi.auth2.ClientConfig;\n\nexport interface NgGapiClientConfig extends ClientConfig {\n    discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n    protected clientConfig: NgGapiClientConfig;\n\n    constructor(clientConfig: NgGapiClientConfig) {\n        this.clientConfig = clientConfig\n    }\n\n    public getClientConfig(): NgGapiClientConfig {\n        return this.clientConfig;\n    }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {GoogleApiConfig, NgGapiClientConfig} from \"./config/GoogleApiConfig\";\nimport {Observer} from \"rxjs/Observer\";\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n    new InjectionToken<NgGapiClientConfig>(\"ng-gapi.config\");\n\n@Injectable()\nexport class GoogleApiService {\n    private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n    private config: GoogleApiConfig;\n\n    constructor() {\n    }\n\n    public onInitialise(config: NgGapiClientConfig){\n        this.config = new GoogleApiConfig(config);\n        this.loadGapi().subscribe();\n    }\n\n    public onLoad(): Observable<void> {\n        return this.loadGapi();\n    }\n\n    public getConfig(): GoogleApiConfig {\n        return this.config;\n    }\n\n    private loadGapi(): Observable<void> {\n        return Observable.create((observer: Observer<boolean>) => {\n            let node = document.createElement('script');\n            node.src = this.gapiUrl;\n            node.type = 'text/javascript';\n            node.charset = 'utf-8';\n            document.getElementsByTagName('head')[0].appendChild(node);\n            node.onload = () => {\n                observer.next(true);\n                observer.complete();\n            };\n        });\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/mergeMap';\nimport {GoogleApiService} from \"./GoogleApiService\";\nimport GoogleAuth = gapi.auth2.GoogleAuth;\n\n@Injectable()\nexport class GoogleAuthService {\n    private GoogleAuth: GoogleAuth = undefined;\n\n    constructor(private googleApi: GoogleApiService) {\n        this.googleApi.onLoad().subscribe(() => {\n            this.loadGapiAuth();\n        });\n    }\n\n    public getAuth(): Observable<GoogleAuth> {\n        if (!this.GoogleAuth) {\n            return this.googleApi.onLoad().mergeMap(() => this.loadGapiAuth());\n        }\n        return Observable.of(this.GoogleAuth);\n    }\n\n    private loadGapiAuth(): Observable<GoogleAuth> {\n        return Observable.create((observer: Observer<GoogleAuth>) => {\n            gapi.load('auth2', () => {\n                gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n                  this.GoogleAuth = auth;\n                  observer.next(auth);\n                  observer.complete();\n                });\n            });\n        });\n    }\n}\n","import {ModuleWithProviders, NgModule, Provider} from \"@angular/core\";\nimport {GoogleAuthService} from \"./GoogleAuthService\";\nimport {GoogleApiService} from \"./GoogleApiService\";\n\n@NgModule()\nexport class GoogleApiModule {\n    static forRoot(gapiConfigProvider: Provider): ModuleWithProviders {\n        return {\n            ngModule: GoogleApiModule,\n            providers: [\n                gapiConfigProvider,\n                GoogleAuthService,\n                GoogleApiService\n            ]\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;IAMA;IAGI,yBAAY,YAAgC;QACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;KACnC;;;;IAEM,yCAAe;;;;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;;0BAdjC;IAgBC;;;;;;AChBD,qBAKW,cAAc,GACrB,IAAI,cAAc,CAAqB,gBAAgB,CAAC,CAAC;;IAOzD;uBAHmC,mCAAmC;KAIrE;;;;;IAEM,uCAAY;;;;cAAC,MAA0B;QAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;;;;;IAGzB,iCAAM;;;;QACT,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;;;;;IAGpB,oCAAS;;;;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;IAGf,mCAAQ;;;;;QACZ,OAAO,UAAU,CAAC,MAAM,CAAC,UAAC,QAA2B;YACjD,qBAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC5C,IAAI,CAAC,GAAG,GAAG,KAAI,CAAC,OAAO,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,GAAG;gBACV,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB,CAAC;SACL,CAAC,CAAC;;;gBAhCV,UAAU;;;;2BARX;;;;;;;ACAA;IAYI,2BAAoB,SAA2B;QAA/C,iBAIC;QAJmB,cAAS,GAAT,SAAS,CAAkB;0BAFd,SAAS;QAGtC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC;YAC9B,KAAI,CAAC,YAAY,EAAE,CAAC;SACvB,CAAC,CAAC;KACN;;;;IAEM,mCAAO;;;;;QACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,GAAA,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;;;IAGlC,wCAAY;;;;;QAChB,OAAO,UAAU,CAAC,MAAM,CAAC,UAAC,QAA8B;YACpD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,IAAgB;oBAClF,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB,CAAC,CAAC;aACN,CAAC,CAAC;SACN,CAAC,CAAC;;;gBA1BV,UAAU;;;;gBAHH,gBAAgB;;4BALxB;;;;;;;ACAA;;;;;;;IAMW,uBAAO;;;;IAAd,UAAe,kBAA4B;QACvC,OAAO;YACH,QAAQ,EAAE,eAAe;YACzB,SAAS,EAAE;gBACP,kBAAkB;gBAClB,iBAAiB;gBACjB,gBAAgB;aACnB;SACJ,CAAA;KACJ;;gBAXJ,QAAQ;;0BAJT;;;;;;;;;;;;;;;"}
